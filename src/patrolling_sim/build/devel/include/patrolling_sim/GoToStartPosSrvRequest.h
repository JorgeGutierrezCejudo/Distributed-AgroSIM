// Generated by gencpp from file patrolling_sim/GoToStartPosSrvRequest.msg
// DO NOT EDIT!


#ifndef PATROLLING_SIM_MESSAGE_GOTOSTARTPOSSRVREQUEST_H
#define PATROLLING_SIM_MESSAGE_GOTOSTARTPOSSRVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>

namespace patrolling_sim
{
template <class ContainerAllocator>
struct GoToStartPosSrvRequest_
{
  typedef GoToStartPosSrvRequest_<ContainerAllocator> Type;

  GoToStartPosSrvRequest_()
    : teamsize()
    , sleep_between_goals()  {
    }
  GoToStartPosSrvRequest_(const ContainerAllocator& _alloc)
    : teamsize(_alloc)
    , sleep_between_goals(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _teamsize_type;
  _teamsize_type teamsize;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _sleep_between_goals_type;
  _sleep_between_goals_type sleep_between_goals;





  typedef boost::shared_ptr< ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GoToStartPosSrvRequest_

typedef ::patrolling_sim::GoToStartPosSrvRequest_<std::allocator<void> > GoToStartPosSrvRequest;

typedef boost::shared_ptr< ::patrolling_sim::GoToStartPosSrvRequest > GoToStartPosSrvRequestPtr;
typedef boost::shared_ptr< ::patrolling_sim::GoToStartPosSrvRequest const> GoToStartPosSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator1> & lhs, const ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.teamsize == rhs.teamsize &&
    lhs.sleep_between_goals == rhs.sleep_between_goals;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator1> & lhs, const ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace patrolling_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "46245284711564dca6f0ea10c19a6573";
  }

  static const char* value(const ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x46245284711564dcULL;
  static const uint64_t static_value2 = 0xa6f0ea10c19a6573ULL;
};

template<class ContainerAllocator>
struct DataType< ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "patrolling_sim/GoToStartPosSrvRequest";
  }

  static const char* value(const ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/UInt8 teamsize\n"
"std_msgs/UInt8 sleep_between_goals\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt8\n"
"uint8 data\n"
;
  }

  static const char* value(const ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.teamsize);
      stream.next(m.sleep_between_goals);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoToStartPosSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::patrolling_sim::GoToStartPosSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "teamsize: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.teamsize);
    s << indent << "sleep_between_goals: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.sleep_between_goals);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATROLLING_SIM_MESSAGE_GOTOSTARTPOSSRVREQUEST_H
