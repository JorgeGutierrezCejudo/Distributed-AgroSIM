# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from agrosim/descentralised.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import agrosim.msg

class descentralised(genpy.Message):
  _md5sum = "26872adb2b4262c73d17f57e4c48e1dc"
  _type = "agrosim/descentralised"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 Id
float64 pos_x
float64 pos_y
int32 task
float64 cost
int32[] taskdone
agrosim/neighbour others


================================================================================
MSG: agrosim/neighbour
int32[] Id
int32[] Task
int32 row
int32 column
float64[]  costs"""
  __slots__ = ['Id','pos_x','pos_y','task','cost','taskdone','others']
  _slot_types = ['int32','float64','float64','int32','float64','int32[]','agrosim/neighbour']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Id,pos_x,pos_y,task,cost,taskdone,others

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(descentralised, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Id is None:
        self.Id = 0
      if self.pos_x is None:
        self.pos_x = 0.
      if self.pos_y is None:
        self.pos_y = 0.
      if self.task is None:
        self.task = 0
      if self.cost is None:
        self.cost = 0.
      if self.taskdone is None:
        self.taskdone = []
      if self.others is None:
        self.others = agrosim.msg.neighbour()
    else:
      self.Id = 0
      self.pos_x = 0.
      self.pos_y = 0.
      self.task = 0
      self.cost = 0.
      self.taskdone = []
      self.others = agrosim.msg.neighbour()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2did().pack(_x.Id, _x.pos_x, _x.pos_y, _x.task, _x.cost))
      length = len(self.taskdone)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.taskdone))
      length = len(self.others.Id)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.others.Id))
      length = len(self.others.Task)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.others.Task))
      _x = self
      buff.write(_get_struct_2i().pack(_x.others.row, _x.others.column))
      length = len(self.others.costs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.others.costs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.others is None:
        self.others = agrosim.msg.neighbour()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.Id, _x.pos_x, _x.pos_y, _x.task, _x.cost,) = _get_struct_i2did().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.taskdone = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.others.Id = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.others.Task = s.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.others.row, _x.others.column,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.others.costs = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2did().pack(_x.Id, _x.pos_x, _x.pos_y, _x.task, _x.cost))
      length = len(self.taskdone)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.taskdone.tostring())
      length = len(self.others.Id)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.others.Id.tostring())
      length = len(self.others.Task)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.others.Task.tostring())
      _x = self
      buff.write(_get_struct_2i().pack(_x.others.row, _x.others.column))
      length = len(self.others.costs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.others.costs.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.others is None:
        self.others = agrosim.msg.neighbour()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.Id, _x.pos_x, _x.pos_y, _x.task, _x.cost,) = _get_struct_i2did().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.taskdone = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.others.Id = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.others.Task = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 8
      (_x.others.row, _x.others.column,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.others.costs = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_i2did = None
def _get_struct_i2did():
    global _struct_i2did
    if _struct_i2did is None:
        _struct_i2did = struct.Struct("<i2did")
    return _struct_i2did
