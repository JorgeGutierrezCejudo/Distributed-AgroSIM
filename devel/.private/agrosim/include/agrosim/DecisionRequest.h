// Generated by gencpp from file agrosim/DecisionRequest.msg
// DO NOT EDIT!


#ifndef AGROSIM_MESSAGE_DECISIONREQUEST_H
#define AGROSIM_MESSAGE_DECISIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agrosim
{
template <class ContainerAllocator>
struct DecisionRequest_
{
  typedef DecisionRequest_<ContainerAllocator> Type;

  DecisionRequest_()
    : Ids()
    , Task()  {
    }
  DecisionRequest_(const ContainerAllocator& _alloc)
    : Ids(_alloc)
    , Task(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _Ids_type;
  _Ids_type Ids;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _Task_type;
  _Task_type Task;





  typedef boost::shared_ptr< ::agrosim::DecisionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agrosim::DecisionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DecisionRequest_

typedef ::agrosim::DecisionRequest_<std::allocator<void> > DecisionRequest;

typedef boost::shared_ptr< ::agrosim::DecisionRequest > DecisionRequestPtr;
typedef boost::shared_ptr< ::agrosim::DecisionRequest const> DecisionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agrosim::DecisionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agrosim::DecisionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agrosim::DecisionRequest_<ContainerAllocator1> & lhs, const ::agrosim::DecisionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.Ids == rhs.Ids &&
    lhs.Task == rhs.Task;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agrosim::DecisionRequest_<ContainerAllocator1> & lhs, const ::agrosim::DecisionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agrosim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agrosim::DecisionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agrosim::DecisionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agrosim::DecisionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agrosim::DecisionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agrosim::DecisionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agrosim::DecisionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agrosim::DecisionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1060026e4273e7465b845f8a5d52b9fb";
  }

  static const char* value(const ::agrosim::DecisionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1060026e4273e746ULL;
  static const uint64_t static_value2 = 0x5b845f8a5d52b9fbULL;
};

template<class ContainerAllocator>
struct DataType< ::agrosim::DecisionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agrosim/DecisionRequest";
  }

  static const char* value(const ::agrosim::DecisionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agrosim::DecisionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] Ids\n"
"int32[] Task\n"
;
  }

  static const char* value(const ::agrosim::DecisionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agrosim::DecisionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Ids);
      stream.next(m.Task);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DecisionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agrosim::DecisionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agrosim::DecisionRequest_<ContainerAllocator>& v)
  {
    s << indent << "Ids[]" << std::endl;
    for (size_t i = 0; i < v.Ids.size(); ++i)
    {
      s << indent << "  Ids[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Ids[i]);
    }
    s << indent << "Task[]" << std::endl;
    for (size_t i = 0; i < v.Task.size(); ++i)
    {
      s << indent << "  Task[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Task[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGROSIM_MESSAGE_DECISIONREQUEST_H
