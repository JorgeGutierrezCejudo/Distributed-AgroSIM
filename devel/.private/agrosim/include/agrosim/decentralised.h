// Generated by gencpp from file agrosim/decentralised.msg
// DO NOT EDIT!


#ifndef AGROSIM_MESSAGE_DECENTRALISED_H
#define AGROSIM_MESSAGE_DECENTRALISED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agrosim
{
template <class ContainerAllocator>
struct decentralised_
{
  typedef decentralised_<ContainerAllocator> Type;

  decentralised_()
    : Id(0)
    , pos_x(0.0)
    , pos_y(0.0)
    , task(0.0)
    , cost(0.0)  {
    }
  decentralised_(const ContainerAllocator& _alloc)
    : Id(0)
    , pos_x(0.0)
    , pos_y(0.0)
    , task(0.0)
    , cost(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _Id_type;
  _Id_type Id;

   typedef double _pos_x_type;
  _pos_x_type pos_x;

   typedef double _pos_y_type;
  _pos_y_type pos_y;

   typedef double _task_type;
  _task_type task;

   typedef double _cost_type;
  _cost_type cost;





  typedef boost::shared_ptr< ::agrosim::decentralised_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agrosim::decentralised_<ContainerAllocator> const> ConstPtr;

}; // struct decentralised_

typedef ::agrosim::decentralised_<std::allocator<void> > decentralised;

typedef boost::shared_ptr< ::agrosim::decentralised > decentralisedPtr;
typedef boost::shared_ptr< ::agrosim::decentralised const> decentralisedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agrosim::decentralised_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agrosim::decentralised_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agrosim::decentralised_<ContainerAllocator1> & lhs, const ::agrosim::decentralised_<ContainerAllocator2> & rhs)
{
  return lhs.Id == rhs.Id &&
    lhs.pos_x == rhs.pos_x &&
    lhs.pos_y == rhs.pos_y &&
    lhs.task == rhs.task &&
    lhs.cost == rhs.cost;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agrosim::decentralised_<ContainerAllocator1> & lhs, const ::agrosim::decentralised_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agrosim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agrosim::decentralised_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agrosim::decentralised_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agrosim::decentralised_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agrosim::decentralised_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agrosim::decentralised_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agrosim::decentralised_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agrosim::decentralised_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a57c22726ed875c837261edd9574097f";
  }

  static const char* value(const ::agrosim::decentralised_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa57c22726ed875c8ULL;
  static const uint64_t static_value2 = 0x37261edd9574097fULL;
};

template<class ContainerAllocator>
struct DataType< ::agrosim::decentralised_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agrosim/decentralised";
  }

  static const char* value(const ::agrosim::decentralised_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agrosim::decentralised_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 Id\n"
"float64 pos_x\n"
"float64 pos_y\n"
"float64 task\n"
"float64 cost\n"
;
  }

  static const char* value(const ::agrosim::decentralised_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agrosim::decentralised_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Id);
      stream.next(m.pos_x);
      stream.next(m.pos_y);
      stream.next(m.task);
      stream.next(m.cost);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct decentralised_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agrosim::decentralised_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agrosim::decentralised_<ContainerAllocator>& v)
  {
    s << indent << "Id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Id);
    s << indent << "pos_x: ";
    Printer<double>::stream(s, indent + "  ", v.pos_x);
    s << indent << "pos_y: ";
    Printer<double>::stream(s, indent + "  ", v.pos_y);
    s << indent << "task: ";
    Printer<double>::stream(s, indent + "  ", v.task);
    s << indent << "cost: ";
    Printer<double>::stream(s, indent + "  ", v.cost);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGROSIM_MESSAGE_DECENTRALISED_H
