// Generated by gencpp from file agrosim/CostResponse.msg
// DO NOT EDIT!


#ifndef AGROSIM_MESSAGE_COSTRESPONSE_H
#define AGROSIM_MESSAGE_COSTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agrosim
{
template <class ContainerAllocator>
struct CostResponse_
{
  typedef CostResponse_<ContainerAllocator> Type;

  CostResponse_()
    : Id(0)
    , Cost()  {
    }
  CostResponse_(const ContainerAllocator& _alloc)
    : Id(0)
    , Cost(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _Id_type;
  _Id_type Id;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _Cost_type;
  _Cost_type Cost;





  typedef boost::shared_ptr< ::agrosim::CostResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agrosim::CostResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CostResponse_

typedef ::agrosim::CostResponse_<std::allocator<void> > CostResponse;

typedef boost::shared_ptr< ::agrosim::CostResponse > CostResponsePtr;
typedef boost::shared_ptr< ::agrosim::CostResponse const> CostResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agrosim::CostResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agrosim::CostResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agrosim::CostResponse_<ContainerAllocator1> & lhs, const ::agrosim::CostResponse_<ContainerAllocator2> & rhs)
{
  return lhs.Id == rhs.Id &&
    lhs.Cost == rhs.Cost;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agrosim::CostResponse_<ContainerAllocator1> & lhs, const ::agrosim::CostResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agrosim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agrosim::CostResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agrosim::CostResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agrosim::CostResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agrosim::CostResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agrosim::CostResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agrosim::CostResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agrosim::CostResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a654b5089c86fad5cea4a044ea2bd61f";
  }

  static const char* value(const ::agrosim::CostResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa654b5089c86fad5ULL;
  static const uint64_t static_value2 = 0xcea4a044ea2bd61fULL;
};

template<class ContainerAllocator>
struct DataType< ::agrosim::CostResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agrosim/CostResponse";
  }

  static const char* value(const ::agrosim::CostResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agrosim::CostResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 Id\n"
"float64[] Cost\n"
"\n"
;
  }

  static const char* value(const ::agrosim::CostResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agrosim::CostResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Id);
      stream.next(m.Cost);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CostResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agrosim::CostResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agrosim::CostResponse_<ContainerAllocator>& v)
  {
    s << indent << "Id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Id);
    s << indent << "Cost[]" << std::endl;
    for (size_t i = 0; i < v.Cost.size(); ++i)
    {
      s << indent << "  Cost[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Cost[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGROSIM_MESSAGE_COSTRESPONSE_H
